import Image from "next/image"
import { multipart_post } from "@/helpers/api_helper";
import { useState, useRef } from "react";
import SimpleReactValidator from "simple-react-validator";
import ErrorMessage from "@/components/ErrorMessage";
import SuccessMessage from "@/components/SuccessMessage";

const ContactSec = ({ item }) => {

    const [formInput, setFormInput] = useState({ your_name: '', user_email: '', massage: ''});
    const simpleValidator = useRef(new SimpleReactValidator());
    const [forceUpdate, setForceUpdate] = useState();
    const [ButtonDisabled, SetButtonDisabled] = useState(false);
    const [Error, SetError] = useState("");
    const [SuccessMessageText, SetSuccessMessageText] = useState("");
    const [submitBtnText, SetSubmitBtnText] = useState("Submit");

    // input text change handler
    const handleInputChange = (event) => {
        event.persist();
        setFormInput((inputs) => ({ ...formInput, [event.target.name]: event.target.value }));
    };

    // form submit event
    const handleSubmit = async (event) => {
        event.preventDefault();
        const formValid = simpleValidator.current.allValid();
        if (!formValid) {
            simpleValidator.current.showMessages(true);
            setForceUpdate(1);
        } else {
            SetError("");
            SetButtonDisabled(true);
            SetSubmitBtnText('Wait....');
            const result = await multipart_post('wp-json/contact-form-7/v1/contact-forms/' + item['formShortcodeId'] + '/feedback', formInput, { 'content-type': "application/json" });
            SetSubmitBtnText('Submit');
            if (result.status !== 'validation_failed') {
                SetSuccessMessageText(result.message);
                setFormInput({ your_name: '', user_email: '', massage: ''})
                setTimeout(function () {
                    SetSuccessMessageText('');
                }, 2000);
            } else {
                SetError(result.message);
                setTimeout(function () {
                    SetError('');
                }, 5000);
            }
        }
    }

    return (
        <div className="contact-section">
            <div className="container">
                <div className="row">
                    <div className="col-lg-6">
                        <div className="contact-form">
                            {(item != null && item.contactTitle != undefined) &&
                                <h3 dangerouslySetInnerHTML={{ __html: item.contactTitle }}></h3>
                            }
                            <form onSubmit={handleSubmit}>
                                <div className="form-wrapper flxrow">
                                    <div className="input-row">
                                        <label htmlFor="your_name">Your name *</label>
                                        <input className="input-text" id="your_name" name="your_name" value={formInput.your_name} onChange={handleInputChange} placeholder="Your name" type="text" />
                                        {simpleValidator.current.message("your_name", formInput.your_name, "required", {
                                            className: "error-message",
                                            messages: { required: "Please enter name" }
                                        })}

                                    </div>
                                    <div className="input-row">
                                        <label htmlFor="user_email">Your email *</label>
                                        <input className="input-text" id="user_email" name="user_email" value={formInput.user_email} onChange={handleInputChange} placeholder="Your email *" type="text" />
                                        {simpleValidator.current.message("user_email", formInput.user_email, "required|email", {
                                            className: "error-message",
                                            messages: { required: "Please enter email", email: "Please enter valid email" }
                                        })}

                                    </div>
                                    <div className="input-row">
                                        <label htmlFor="massage">Fill your massage *</label>
                                        <textarea cols="40" rows="10" className="input-text" name="massage" value={formInput.massage} onChange={handleInputChange} id="massage" placeholder="Fill your massage"></textarea>
                                        {simpleValidator.current.message("massage", formInput.massage, "required", {
                                            className: "error-message",
                                            messages: { required: "Please enter message"}
                                        })}
                                    </div>
                                    <div className="input-row btn-row">
                                        <input type="submit" value={submitBtnText} className="" />
                                    </div>
                                    <ErrorMessage message={Error} />
                                    <SuccessMessage message={SuccessMessageText} />
                                </div>
                            </form>
                        </div>
                    </div>
                    <div className="col-lg-6">
                        <div className="imagebox">
                            <div className="cicrcle">
                                <svg width="125" height="127" viewBox="0 0 125 127" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <circle cx="62" cy="64" r="60.5" fill="#939B7E" stroke="white" strokeWidth="3"></circle>
                                    <circle cx="62.0022" cy="63.9995" r="22.1429" fill="white"></circle>
                                    <path d="M67.0926 66.1199C66.4976 65.9881 66.027 66.2726 65.6102 66.5211C65.1835 66.7772 64.3719 67.4554 63.9068 67.2818C61.5252 66.2717 59.2853 64.1244 58.3157 61.6612C58.1448 61.1718 58.8 60.3305 59.0468 59.8857C59.2862 59.4551 59.5567 58.9657 59.4333 58.3482C59.3218 57.7934 57.8797 55.9031 57.3698 55.3862C57.0335 55.0447 56.689 54.8569 56.3353 54.8266C55.0056 54.7678 53.5205 56.5955 53.2601 57.0327C52.6076 57.9651 52.6112 59.2056 53.2711 60.7099C54.8612 64.7504 60.8754 70.848 64.8124 72.5477C65.539 72.8977 66.2034 73.0731 66.8001 73.0731C67.3841 73.0731 67.9041 72.9053 68.351 72.5723C68.6882 72.3722 70.5351 70.7665 70.4867 69.3599C70.4575 69.0014 70.2756 68.6429 69.9484 68.2957C69.4504 67.7655 67.6272 66.2357 67.0926 66.1199Z" fill="#939B7E"></path>
                                    <path d="M38.9614 97.012C39.5644 97.5301 39.9742 98.1088 40.1907 98.7483C40.3965 99.3886 40.4165 100.046 40.2508 100.72C40.0801 101.399 39.7282 102.049 39.1953 102.67C38.6573 103.296 38.0678 103.742 37.4266 104.007C36.7804 104.278 36.1253 104.361 35.4613 104.254C34.7915 104.142 34.1551 103.827 33.5521 103.309C32.8389 102.696 32.4056 102.022 32.2522 101.285C32.0988 100.549 32.2301 99.8154 32.6463 99.0846L33.6726 99.9662C33.45 100.39 33.3823 100.82 33.4697 101.258C33.5572 101.696 33.8241 102.107 34.2706 102.49C34.8794 103.013 35.54 103.218 36.2523 103.104C36.9597 102.996 37.6246 102.58 38.2473 101.855C38.8649 101.136 39.1737 100.419 39.1736 99.7036C39.1736 98.988 38.8691 98.3688 38.2603 97.8458C37.8138 97.4622 37.3725 97.2545 36.9365 97.2225C36.5004 97.1905 36.0948 97.3107 35.7198 97.5831L34.6935 96.7015C35.3332 96.203 36.0262 95.977 36.7724 96.0234C37.5185 96.0699 38.2482 96.3994 38.9614 97.012Z" fill="white"></path>
                                    <path d="M29.6656 90.5179C29.9906 90.8732 30.1997 91.2207 30.2927 91.5603C30.3858 91.8999 30.388 92.2138 30.2994 92.502C30.2052 92.7954 30.0424 93.0478 29.8112 93.2594C29.405 93.6308 28.9391 93.7669 28.4133 93.6677C27.8875 93.5685 27.3563 93.2256 26.8198 92.639L25.8138 91.5391L25.7376 91.6088C25.4105 91.908 25.2477 92.2226 25.2492 92.5527C25.2455 92.8772 25.3727 93.1805 25.6306 93.4625C25.8576 93.7107 26.1183 93.8711 26.4126 93.9437C26.6961 94.0159 26.9744 93.9634 27.2474 93.7862L28.0677 94.683C27.7373 94.9334 27.385 95.0692 27.0107 95.0904C26.6257 95.1111 26.2529 95.0376 25.8925 94.8701C25.5212 94.702 25.186 94.4544 24.8868 94.1273C24.3503 93.5406 24.0901 92.9447 24.1062 92.3395C24.1168 91.7394 24.3871 91.1968 24.9174 90.7119L27.4979 88.3517L28.2098 89.1301L27.5603 89.864C27.8999 89.7709 28.2519 89.765 28.6162 89.8462C28.9805 89.9273 29.3303 90.1512 29.6656 90.5179ZM28.7755 91.0057C28.5536 90.7631 28.3115 90.6117 28.0491 90.5513C27.7759 90.4904 27.5021 90.5025 27.2278 90.5877C26.9483 90.6672 26.6826 90.8014 26.4307 90.9904L27.3438 91.9888C27.6688 92.3441 27.963 92.5412 28.2264 92.58C28.4847 92.6132 28.7068 92.5446 28.893 92.3744C29.0848 92.199 29.1726 91.9892 29.1564 91.745C29.1294 91.5003 29.0025 91.2539 28.7755 91.0057Z" fill="white"></path>
                                    <path d="M25.5328 83.7539L17.6862 86.3199L17.3084 85.1647L25.155 82.5987L25.5328 83.7539Z" fill="white"></path>
                                    <path d="M23.7789 77.2936L15.6608 78.7935L15.44 77.5984L23.5581 76.0985L23.7789 77.2936Z" fill="white"></path>
                                    <path d="M23.4475 60.295C23.3572 60.8612 23.1659 61.357 22.8736 61.7826C22.5749 62.1994 22.1737 62.507 21.6699 62.7054C21.1673 62.8962 20.5612 62.935 19.8517 62.8219L14.9035 62.0331L15.0948 60.8328L20.0543 61.6235C20.7488 61.7342 21.2848 61.6493 21.6624 61.3689C22.0399 61.0885 22.2738 60.6652 22.364 60.0991C22.4531 59.5405 22.3618 59.0692 22.0902 58.6854C21.8185 58.3015 21.3354 58.0542 20.641 57.9435L15.6815 57.1529L15.8728 55.9526L20.821 56.7414C21.5306 56.8545 22.0933 57.0874 22.5093 57.4402C22.9264 57.7853 23.2109 58.21 23.3628 58.7141C23.5083 59.2094 23.5365 59.7364 23.4475 60.295Z" fill="white"></path>
                                    <path d="M26.5166 48.8452C26.2498 49.5124 25.8667 49.9972 25.3671 50.2997C24.8675 50.6021 24.3352 50.6774 23.7702 50.5256L24.2257 49.3864C24.4897 49.4261 24.753 49.375 25.0156 49.233C25.271 49.0882 25.4683 48.8419 25.6073 48.4941C25.7436 48.1534 25.7719 47.8766 25.6924 47.6637C25.6128 47.4508 25.4808 47.3074 25.2963 47.2336C25.0265 47.1258 24.8016 47.1635 24.6213 47.3466C24.4368 47.5198 24.2289 47.7824 23.9976 48.1345C23.8146 48.4071 23.6102 48.6711 23.3846 48.9267C23.1617 49.1751 22.9148 49.3604 22.6437 49.4825C22.3683 49.5947 22.0639 49.5841 21.7303 49.4507C21.2689 49.2663 20.9566 48.9356 20.7933 48.4587C20.6228 47.979 20.6653 47.4197 20.9207 46.7809C21.1562 46.1918 21.4883 45.773 21.917 45.5245C22.3484 45.2689 22.836 45.2128 23.3797 45.356L22.9455 46.442C22.7042 46.3867 22.4842 46.4222 22.2855 46.5486C22.0896 46.6678 21.9335 46.873 21.8172 47.164C21.7037 47.4479 21.676 47.692 21.7343 47.8964C21.7854 48.098 21.9032 48.2357 22.0878 48.3094C22.2723 48.3832 22.4604 48.3349 22.652 48.1646C22.8464 47.9871 23.0572 47.7379 23.2842 47.4171C23.5042 47.0934 23.727 46.8038 23.9526 46.5483C24.174 46.2828 24.421 46.0975 24.6935 45.9924C24.966 45.8873 25.2939 45.9114 25.6772 46.0647C26.1627 46.2505 26.4885 46.5989 26.6547 47.1099C26.8237 47.6138 26.7776 48.1922 26.5166 48.8452Z" fill="white"></path>
                                    <path d="M33.735 35.9181L27.8665 30.4427L28.6956 29.5541L35.8593 30.7336L31.4411 26.6114L32.2702 25.7227L38.1388 31.1981L37.3097 32.0867L30.146 30.9073L34.5642 35.0294L33.735 35.9181Z" fill="white"></path>
                                    <path d="M45.1302 25.8256C44.6771 26.1244 44.2014 26.2916 43.703 26.3273C43.2067 26.3524 42.7313 26.2493 42.2766 26.018C41.8178 25.7804 41.4242 25.4127 41.096 24.9149C40.7678 24.4172 40.5869 23.9138 40.5534 23.4048C40.5221 22.8853 40.621 22.4034 40.8501 21.9594C41.0749 21.5089 41.4107 21.1364 41.8574 20.8418C42.3105 20.5431 42.7851 20.3811 43.2814 20.3561C43.7798 20.3204 44.2584 20.4214 44.7173 20.659C45.1783 20.8861 45.5729 21.2485 45.9012 21.7462C46.2294 22.244 46.4092 22.7526 46.4405 23.2722C46.474 23.7812 46.3783 24.2609 46.1534 24.7114C45.9243 25.1554 45.5833 25.5269 45.1302 25.8256ZM44.5558 24.9546C44.7983 24.7947 44.9816 24.5868 45.1059 24.3309C45.2365 24.0707 45.2878 23.7805 45.2597 23.4603C45.2274 23.1336 45.0935 22.7916 44.8578 22.4342C44.6222 22.0769 44.3627 21.8222 44.0793 21.6703C43.7982 21.5077 43.5123 21.4353 43.2218 21.4529C42.9376 21.4663 42.6743 21.553 42.4318 21.7129C42.1893 21.8728 42.0028 22.0828 41.8721 22.3429C41.7479 22.5988 41.7019 22.8901 41.7342 23.2168C41.7623 23.537 41.8941 23.8759 42.1298 24.2332C42.3654 24.5906 42.627 24.8484 42.9146 25.0068C43.1979 25.1587 43.4816 25.228 43.7658 25.2146C44.05 25.2011 44.3133 25.1145 44.5558 24.9546Z" fill="white"></path>
                                    <path d="M53.4638 21.0672L49.9962 16.2587L51.1426 15.8551L53.605 19.5345L53.349 15.0783L54.6252 14.6291L57.2173 18.2628L56.8315 13.8523L57.9779 13.4487L58.2875 19.369L57.1086 19.784L54.3907 16.0001L54.6427 20.6522L53.4638 21.0672Z" fill="white"></path>
                                    <path d="M86.5152 29.8793C85.9122 29.3613 85.5024 28.7826 85.2858 28.1431C85.0801 27.5028 85.0601 26.8457 85.2258 26.1718C85.3965 25.4921 85.7483 24.8421 86.2813 24.2216C86.8192 23.5954 87.4088 23.1496 88.05 22.8841C88.6961 22.6129 89.3512 22.5307 90.0152 22.6375C90.685 22.7494 91.3214 23.0643 91.9245 23.5823C92.6377 24.1949 93.071 24.8695 93.2244 25.6059C93.3778 26.3423 93.2464 27.0759 92.8303 27.8067L91.8039 26.9251C92.0266 26.5017 92.0942 26.071 92.0068 25.6332C91.9194 25.1953 91.6525 24.7846 91.206 24.4011C90.5972 23.8781 89.9366 23.6734 89.2243 23.7871C88.5169 23.8949 87.8519 24.3112 87.2293 25.036C86.6117 25.755 86.3029 26.4723 86.3029 27.1878C86.303 27.9033 86.6074 28.5226 87.2163 29.0456C87.6627 29.4291 88.104 29.6369 88.5401 29.6688C88.9762 29.7008 89.3817 29.5806 89.7568 29.3083L90.7831 30.1899C90.1433 30.6883 89.4504 30.9143 88.7042 30.8679C87.9581 30.8215 87.2284 30.492 86.5152 29.8793Z" fill="white"></path>
                                    <path d="M95.811 36.3735C95.4859 36.0181 95.2769 35.6707 95.1838 35.3311C95.0908 34.9915 95.0885 34.6775 95.1771 34.3893C95.2714 34.096 95.4341 33.8435 95.6654 33.632C96.0715 33.2606 96.5375 33.1244 97.0633 33.2236C97.5891 33.3228 98.1203 33.6657 98.6568 34.2523L99.6628 35.3523L99.7389 35.2826C100.066 34.9834 100.229 34.6687 100.227 34.3386C100.231 34.0141 100.104 33.7109 99.8459 33.4289C99.619 33.1807 99.3583 33.0203 99.064 32.9476C98.7804 32.8755 98.5021 32.928 98.2291 33.1052L97.4088 32.2083C97.7392 31.958 98.0916 31.8222 98.4658 31.801C98.8509 31.7803 99.2237 31.8537 99.5841 32.0213C99.9553 32.1893 100.291 32.4369 100.59 32.7641C101.126 33.3507 101.386 33.9466 101.37 34.5519C101.36 35.152 101.089 35.6945 100.559 36.1795L97.9787 38.5397L97.2667 37.7613L97.9162 37.0274C97.5766 37.1204 97.2247 37.1264 96.8604 37.0452C96.4961 36.964 96.1463 36.7401 95.811 36.3735ZM96.7011 35.8857C96.9229 36.1282 97.1651 36.2797 97.4275 36.3401C97.7007 36.401 97.9745 36.3888 98.2488 36.3037C98.5283 36.2241 98.794 36.0899 99.0459 35.901L98.1327 34.9026C97.8077 34.5472 97.5135 34.3501 97.2501 34.3113C96.9919 34.2782 96.7697 34.3467 96.5836 34.517C96.3918 34.6924 96.304 34.9022 96.3202 35.1464C96.3471 35.3911 96.4741 35.6375 96.7011 35.8857Z" fill="white"></path>
                                    <path d="M99.9438 43.1374L107.79 40.5715L108.168 41.7267L100.322 44.2926L99.9438 43.1374Z" fill="white"></path>
                                    <path d="M101.698 49.5977L109.816 48.0978L110.037 49.293L101.918 50.7929L101.698 49.5977Z" fill="white"></path>
                                    <path d="M102.029 66.5963C102.119 66.0302 102.311 65.5343 102.603 65.1087C102.902 64.6919 103.303 64.3843 103.807 64.186C104.309 63.9952 104.915 63.9564 105.625 64.0695L110.573 64.8583L110.382 66.0585L105.422 65.2679C104.728 65.1572 104.192 65.242 103.814 65.5224C103.437 65.8028 103.203 66.2261 103.113 66.7923C103.023 67.3509 103.115 67.8221 103.386 68.206C103.658 68.5899 104.141 68.8372 104.836 68.9479L109.795 69.7385L109.604 70.9387L104.656 70.1499C103.946 70.0368 103.383 69.8039 102.967 69.4512C102.55 69.106 102.266 68.6814 102.114 68.1773C101.968 67.6819 101.94 67.1549 102.029 66.5963Z" fill="white"></path>
                                    <path d="M98.96 78.0461C99.2267 77.3789 99.6099 76.8941 100.11 76.5917C100.609 76.2893 101.141 76.2139 101.706 76.3657L101.251 77.5049C100.987 77.4652 100.724 77.5164 100.461 77.6584C100.206 77.8032 100.008 78.0495 99.8692 78.3973C99.733 78.738 99.7047 79.0148 99.7842 79.2277C99.8637 79.4406 99.9958 79.5839 100.18 79.6577C100.45 79.7655 100.675 79.7279 100.855 79.5448C101.04 79.3715 101.248 79.1089 101.479 78.7568C101.662 78.4843 101.866 78.2202 102.092 77.9647C102.315 77.7162 102.562 77.531 102.833 77.4088C103.108 77.2967 103.413 77.3072 103.746 77.4406C104.208 77.6251 104.52 77.9557 104.683 78.4327C104.854 78.9124 104.811 79.4717 104.556 80.1105C104.32 80.6996 103.988 81.1184 103.56 81.3669C103.128 81.6224 102.641 81.6786 102.097 81.5353L102.531 80.4494C102.772 80.5047 102.992 80.4692 103.191 80.3428C103.387 80.2235 103.543 80.0184 103.659 79.7274C103.773 79.4435 103.801 79.1993 103.742 78.9949C103.691 78.7934 103.573 78.6557 103.389 78.5819C103.204 78.5081 103.016 78.5564 102.825 78.7268C102.63 78.9043 102.419 79.1534 102.192 79.4743C101.972 79.7979 101.75 80.0875 101.524 80.3431C101.303 80.6086 101.056 80.7938 100.783 80.8989C100.511 81.004 100.183 80.9799 99.7994 80.8267C99.3139 80.6408 98.9881 80.2924 98.8219 79.7814C98.6529 79.2776 98.6989 78.6991 98.96 78.0461Z" fill="white"></path>
                                    <path d="M91.7415 90.9733L97.6101 96.4486L96.781 97.3373L89.6173 96.1578L94.0355 100.28L93.2063 101.169L87.3378 95.6933L88.1669 94.8046L95.3306 95.9841L90.9124 91.8619L91.7415 90.9733Z" fill="white"></path>
                                    <path d="M80.3464 101.066C80.7995 100.767 81.2752 100.6 81.7736 100.564C82.2698 100.539 82.7453 100.642 83.1999 100.873C83.6588 101.111 84.0523 101.479 84.3806 101.976C84.7088 102.474 84.8897 102.978 84.9232 103.487C84.9545 104.006 84.8556 104.488 84.6265 104.932C84.4016 105.382 84.0658 105.755 83.6191 106.05C83.1661 106.348 82.6914 106.51 82.1952 106.535C81.6968 106.571 81.2182 106.47 80.7593 106.232C80.2982 106.005 79.9036 105.643 79.5754 105.145C79.2471 104.647 79.0674 104.139 79.0361 103.619C79.0026 103.11 79.0983 102.63 79.3231 102.18C79.5522 101.736 79.8933 101.364 80.3464 101.066ZM80.9208 101.937C80.6783 102.097 80.4949 102.305 80.3707 102.561C80.24 102.821 80.1888 103.111 80.2168 103.431C80.2491 103.758 80.3831 104.1 80.6187 104.457C80.8544 104.814 81.1139 105.069 81.3972 105.221C81.6784 105.384 81.9642 105.456 82.2548 105.438C82.5389 105.425 82.8022 105.338 83.0447 105.178C83.2872 105.019 83.4738 104.809 83.6044 104.548C83.7287 104.293 83.7747 104.001 83.7424 103.675C83.7143 103.354 83.5824 103.015 83.3468 102.658C83.1111 102.301 82.8495 102.043 82.562 101.885C82.2787 101.733 81.9949 101.663 81.7108 101.677C81.4266 101.69 81.1633 101.777 80.9208 101.937Z" fill="white"></path>
                                    <path d="M72.0127 105.824L75.4803 110.633L74.3339 111.036L71.8716 107.357L72.1276 111.813L70.8514 112.262L68.2593 108.629L68.6451 113.039L67.4986 113.443L67.1891 107.522L68.368 107.107L71.0859 110.891L70.8339 106.239L72.0127 105.824Z" fill="white"></path>
                                    <path d="M48.745 111.21L49.2287 109.708L55.109 111.602L54.6253 113.104L48.745 111.21Z" fill="white"></path>
                                    <path d="M69.9173 20.5337L70.2497 18.9915L76.2888 20.2933L75.9564 21.8355L69.9173 20.5337Z" fill="white"></path>
                                </svg>
                            </div>
                            {(item != null && item.contactImage != undefined && item.contactImage.sourceUrl != undefined) &&
                                <div className="image"><Image src={item.contactImage.sourceUrl} width={670} height={665} alt="ContactUsImg" /></div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default ContactSec;